#!/usr/bin/env ruby
# -*- ruby -*-

require 'pp'
require 'optparse'

require 'pione/common'
require 'pione/tuple-space-provider'

include Pione

#
# parse options
#

OPTS = {}
OPTS[:targets] = []
OPTS[:exclusions] = []

option_parser = OptionParser.new do |opt|
  opt.on('-t', '--target=name') {|name| OPTS[:targets] << name }
  opt.on('-e', '--exclude=name') {|name| OPTS[:exclusions] << name}
  opt.on('--color=true or false') {|str|
    bool = nil
    bool = true if str == "true"
    bool = false if str == "false"
    if bool.nil?
      puts "invalid color option: %s" % bool
      exit
    end
    Terminal.color_mode = bool
  }
end

begin
  option_parser.parse!(ARGV)
rescue OptionParser::InvalidOption => e
  e.args.each {|arg| puts "unknown option: #{arg}" }
  exit
end

#
# start druby environment
#

DRb.start_service

# tuple space provider
provider = TupleSpaceProvider.instance

# tuple space servers are not found
if provider.tuple_space_servers.empty?
  puts "No tuple space servers."
  exit 0
end

# print tuples
provider.tuple_space_servers.each do |ts_server|
  puts "TupleSpaceServer: %s" % Terminal.red(ts_server.uuid)
  puts "-"*78
  ts_server.all_tuples.each do |tuple|
    next if tuple.nil?
    # target option
    if not(OPTS[:targets].empty?) and not(OPTS[:targets].include?(tuple.first.to_s))
      next
    end

    # exclude option
    if OPTS[:exclusions].include?(tuple.first.to_s)
      next
    end

    #res = "%s: %s" % [tuple.first, tuple[0,-1].join(",")]
    t = Tuple.from_array(tuple)
    package_rule = t.domain.split("_").first
    puts "%s %s" % [t.name, package_rule]
    #res.gsub!(/\:[a-z]\w+/) {|s| Terminal.red(s) }
    #res.gsub!(/\#<(\S+)/) {|s| "#<%s" % Terminal.green($1) }
  end
end
