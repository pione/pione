Rule Main
  input '*.score'.all
  input 'stat-template.erb'
  output '*.stat.md'.all
  output '*.png'.all
  output '*.html'.all
Flow
  rule PersonalPreStatistics
  rule PersonalStatistics
  rule PersonalBarGraph
  rule TotalMean
  rule TotalStatistics
  rule Histgram
  rule BuildHTML
End

Rule PersonalPreStatistics
  input '*.score'
  output '{$*}.pre-stat.md'
  output '{$*}.mean'
Action
#!/usr/bin/env ruby
scores = File.readlines("{$I[1]}").map{|line| line.split(" ")[1].to_i}
mean = scores.reduce(:+).to_f / scores.size
sd = Math.sqrt(scores.map{|i| (mean-i) ** 2}.reduce(:+) / scores.size)
File.open("{$O[1]}", "w") do |file|
  file.write <<TXT
# Statistics of {$*}

## Scores

![Score of {$*}]({$*}_bar-graph.png)

## Statistics

| stat  | value                    |
|-------|--------------------------|
| Sum   | #{scores.reduce(:+)}     |
| Count | #{scores.size}           |
| Max   | #{scores.max}            |
| Min   | #{scores.min}            |
| Med   | #{scores[scores.size/2]} |
| Mean  | #{mean}                  |
| SD    | #{sd}                    |
TXT
end
File.open("{$O[2]}", "w") {|file| file.write mean}
End

Rule PersonalStatistics
  input '*.pre-stat.md'
  input '{$*}.dev'
  output '{$*}.stat.md'
Action
#!/usr/bin/env ruby
dev = File.read("{$I[2]}").chomp.to_i
File.open("{$O[1]}", "w") do |file|
  file.puts File.read("{$I[1]}").chomp
  file.write "| Deviaion | #{dev} |"
end
End

Rule PersonalBarGraph
  input '*.score'
  output '{$*}_bar-graph.png'
Action
#!/usr/bin/env gnuplot
set style fill solid border lc rgb "black"
set ylabel "score"
set title "scores of {$*}"
set xrange [-1:16]
set yrange [0:100]

set terminal png
set output "{$O[1]}"

plot "{$I[1]}" using 0:2:xtic(1) with boxes notitle
End

Rule TotalMean
  input '*.mean'.all
  output 'total.mean'
Action
#!/usr/bin/env ruby
totals = "{$I[1]}".split(":").map{|filename| File.read(filename).chomp.to_f}
total_mean = totals.reduce(:+) / totals.size
File.open("{$O[1]}", "w"){|file| file.write total_mean}
End

Rule TotalStatistics
  input '*.score'.all
  input '*.mean'.except('total.mean').all
  input 'total.mean'
  output '*.dev'.all
  output 'total.stat.md'
Action
#!/usr/bin/env ruby
total_mean = File.read("{$I[3]}").chomp.to_f
means = "{$I[2]}".split(":").map{|file| File.read(file).chomp.to_f}
total_sd = Math.sqrt(means.map{|mean| (total_mean-mean) ** 2}.reduce(:+) / means.size)
names = "{$*}".split(":").sort
devs = names.inject({}) do |tbl, name|
  mean = File.read(name + ".mean").chomp.to_i
  dev = 50 + 10 * (mean - total_mean) / total_sd
  File.open(name + ".dev", "w") {|file| file.write dev}
  tbl.tap {|x| x[name] = dev}
end
lines = names.map do |name|
  scores = File.readlines("%s.score" % name).map{|line| line.split(" ")[1].to_i}
  mean = File.read("%s.mean" % name).chomp.to_f
  [name, scores, mean, devs[name]].flatten.join(" | ")
end
File.open("{$O[2]}", "w") do |file|
  file.write <<TXT
# Total Statistics

## Histgram

![Histgram of mean scores](histgram.png)

## Scores

| name | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | Mean | Deviation |
|------|---|---|---|---|---|---|---|---|---|----|----|----|----|----|----|------|-----------|
#{lines.map{|line| "| %s |" % line}.join("\n")}
TXT
end
End

Rule Histgram
  input '*.mean'.except('total.mean').all
  output 'histgram.png'
Flow
  rule MeanSummary
  rule HistgramGraph
End

Rule MeanSummary
  input '*.mean'.all
  output 'total.histgram'
Action
#!/usr/bin/env ruby
means = "{$I[1]}".split(":").map{|filename| File.read(filename).chomp.to_f}
File.open("{$O[1]}", "w") do |file|
  10.times do |i|
    file.puts '"%s-%s" %s' % [i*10, (i+1)*10-1, means.select{|mean| i*10 <= mean and mean < (i+1)*10}.size]
  end
end
End

Rule HistgramGraph
  input 'total.histgram'
  output 'histgram.png'
Action
#!/usr/bin/env gnuplot
set style fill solid border lc rgb "black"
set title "Histgram of member's mean score"
set xrange [0:10]
set yrange [0:20]

set terminal png
set output "{$O[1]}"

plot "{$I[1]}" using 0:2:xtic(1) with boxes notitle
End

Rule BuildHTML
  input '*.stat.md'
  input 'stat-template.erb'
  output '{$*}.html'
Flow
  rule MD2HTML
  rule ApplyTemplate
End

Rule MD2HTML
  input '*.stat.md'
  input 'stat-template.erb'
  output '{$*}.html.part'
Action
  redcarpet --parse-tables {$I[1]} > {$O[1]}
End

Rule ApplyTemplate
  input '*.html.part'
  input 'stat-template.erb'
  output '{$*}.html'
Action
#!/usr/bin/env ruby
require 'erb'
title = '{$*}'
content = File.read("{$I[1]}")
b = binding
File.open("{$O[1]}", "w") {|f| f.write(ERB.new(File.read("{$I[2]}")).result(b))}
End
