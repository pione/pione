# -*- coding: utf-8 -*-

InnocentWhite::Document.new do
  # Main flow
  flow('main') do
    inputs  all('*.txt').except('summary.txt')
    outputs 'summary.txt'
    content [ call("convert_to_utf8"),
              call_with_sync("count_kanji"),
              call("make_summary") ]
  end

  # Convert to UTF-8 by nkf
  action('convert_to_utf8') do
    inputs  '*.txt'
    outputs '{$INPUT[1]}.utf8'
    content 'nkf -W {$INPUT[1]} > {$OUTPUT[1]}'
  end

  # Count characters
  action('count_kanji') do
    inputs  '*.utf8'
    outputs '{$INPUT[1].MATCH[1]}.count'
    content ruby(<<-'__CODE__')
      # -*- coding: utf-8 -*-
      table = {}
      text = File.open("{$INPUT[1]").read
      text.split("").each do |c|
        table[c] =  table.has_key?(c) ? table[c].succ : 1
      end
      table.each do |key, val|
        puts "#{key.inspect[1..-2]}:#{val}"
      end
    __CODE__
  end

  # Summarize kanji characters
  action('make_summary') do
    inputs  all('*.count')
    outputs 'summary.txt'
    content ruby(<<-'__CODE__')
      # -*- coding: utf-8 -*-
      table = {}
      "{$INPUT[1]}".split(",").each do |path|
        File.read(path).split("\n").map do |line|
          c, number = line.split(":")
          table[c] = (table.has_key?(c) ? table[c] : 0) + number.to_i
        end
      end

      File.open("{$OUTPUT[1]}", "w+") do |out|
        table.keys.sort {|a,b| table[b] <=> table[a] }.each do |key|
          puts "#{key.inspect[1..-2]}:#{table[key]}"
        end
      end
    __CODE__
  end
end

# Local Variables:
# mode: ruby
# End:
