Rule Main
  input-all '*.txt'.except('summary.txt')
  input-all '*.cmd'
  output 'summary.txt'
Flow----------------------------------------------------------------------------
rule ConvertToUtf8
rule CountChar.sync
rule Summarize
rule Terminate
-----------------------------------------------------------------------------End

Rule ConvertToUtf8
  input '*.txt'.except('summary.txt')
  output '{$INPUT[1]}.utf8'
  param $OPTIONS
Action--------------------------------------------------------------------------
nkf -w {$INPUT[1]} > {$OUTPUT[1]}
-----------------------------------------------------------------------------End

Rule CountChar
  input '*.utf8'
  output '{$INPUT[1].MATCH[1]}.count'.stdout
Action--------------------------------------------------------------------------
#!/usr/bin/env ruby
# coding: utf-8
table = {}
text = File.open("{$INPUT[1]}").read
text.split("").each do |c|
  table[c] =  table.has_key?(c) ? table[c].succ : 1
end
table.each do |key, val|
  puts "#{key.inspect[1..-2]}:#{val}"
end
-----------------------------------------------------------------------------End

Rule Summarize
  input-all '*.count'
  output 'summary.txt'.stdout
Action--------------------------------------------------------------------------
#!/usr/bin/env ruby
# coding: utf-8
table = {}
"{$INPUT[1]}".split(":").each do |path|
  File.read(path).split("\n").map do |line|
    c, number = line.split(":")
    table[c] = (table.has_key?(c) ? table[c] : 0) + number.to_i
  end
end
File.open("{$OUTPUT[1]}", "w+") do |out|
  table.keys.sort {|a,b| table[b] <=> table[a] }.each do |key|
    puts "#{key.inspect[1..-2]}:#{table[key]}"
  end
end
-----------------------------------------------------------------------------End

Rule Terminate
  input 'terminate.cmd'
  output 'terminate.cmd.done'
Flow----------------------------------------------------------------------------
rule /System/Terminate
-----------------------------------------------------------------------------End
